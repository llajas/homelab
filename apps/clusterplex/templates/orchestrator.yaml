{{- define "clusterplex.orchestrator.hardcodedValues" -}}
global:
  nameOverride: "orchestrator"

image:
  tag: {{ .Values.global.clusterplexVersion | default .Chart.AppVersion | quote }}

configMaps:
  config:
    enabled: true
    data:
      TZ: '{{ .Values.global.timezone | default "America/Chicago" }}'
      LISTENING_PORT: '{{ .Values.orchestrator.config.port | default "3500" }}'
      WORKER_SELECTION_STRATEGY: '{{ .Values.orchestrator.config.workerSelectionStrategy | default "LOAD_RANK" }}'
  {{ if .Values.orchestrator.enableGrafanaDashboard }}
  grafana-dashboard:
    enabled: true
    labels:
      grafana_dashboard: "1"
    data:
      {{ (.Files.Glob "files/orchestrator-grafana-dashboard.json").AsConfig | nindent 6 }}
  {{- end }}

envFrom:
  - configMapRef:
      name: "{{ .Release.Name }}-orchestrator-config"

service:
  main:
    type: '{{ .Values.orchestrator.serviceConfig.type | default "ClusterIP" }}'
    externalTrafficPolicy: '{{ .Values.orchestrator.serviceConfig.externalTrafficPolicy }}'
    annotations:
      {{- toYaml .Values.orchestrator.serviceConfig.annotations | nindent 6 }}
    labels:
      {{- toYaml .Values.orchestrator.serviceConfig.labels | nindent 6 }}
    ports:
      http:
        enabled: true
        primary: true
        port: '{{ .Values.orchestrator.config.port | default "3500" }}'
        protocol: TCP

{{- if .Values.orchestrator.prometheusServiceMonitor.enabled }}
serviceMonitor:
  main:
    enabled: true
    annotations:
      {{- toYaml .Values.orchestrator.prometheusServiceMonitor.annotations | nindent 6 }}
    labels:
      {{- toYaml .Values.orchestrator.prometheusServiceMonitor.labels | nindent 6 }}
    selector:
      {{- toYaml .Values.orchestrator.prometheusServiceMonitor.customSelector | nindent 6 }}
    serviceName: {{ .Release.Name }}-orchestrator
    endpoints:
      - port: http
        scheme: http
        path: /metrics
        interval: '{{ .Values.orchestrator.prometheusServiceMonitor.scrapeInterval | default "30s" }}'
        scrapeTimeout: '{{ .Values.orchestrator.prometheusServiceMonitor.scrapeTimeout | default "10s" }}'
{{- end }}

probes:
  {{ if .Values.orchestrator.healthProbes.startup }}
  startup:
    enabled: false
    custom: true
    spec:
      httpGet:
        scheme: HTTP
        path: /health
        port: http
      periodSeconds: 10
      failureThreshold: 15
  {{ else }}
  startup:
    enabled: false
  {{- end }}
  {{ if .Values.orchestrator.healthProbes.readiness }}
  readiness:
    enabled: true
    custom: true
    spec:
      httpGet:
        scheme: HTTP
        path: /health
        port: http
      initialDelaySeconds: 10
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 15
  {{ else }}
  readiness:
    enabled: false
  {{- end }}
  {{ if .Values.orchestrator.healthProbes.liveness }}
  liveness:
    enabled: true
    custom: true
    spec:
      httpGet:
        scheme: HTTP
        path: /health
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
  {{ else }}
  liveness:
    enabled: false
  {{- end }}
{{- end }}

{{ if .Values.orchestrator.enabled }}
{{- $ctx := deepCopy . -}}
{{- $_ := get .Values "orchestrator" | mergeOverwrite $ctx.Values -}}
{{- $_ = include "clusterplex.orchestrator.hardcodedValues" . | fromYaml | merge $ctx.Values -}}
{{- include "bjw-s.common.loader.all" $ctx }}
{{ end }}
