# metal/roles/gpu_install_drivers/tasks/main.yml
- name: Install NVIDIA drivers on GPU nodes
  block:

    - name: Update system packages
      dnf:
        name: "*"
        state: latest
      register: update_result

    - name: Reboot System (if packages were updated)
      reboot:
        reboot_timeout: 600
        test_command: uptime
      when: update_result.changed

    - name: Ensure basic tools
      dnf:
        name:
          - ca-certificates
          - curl
          - pciutils
        state: present

    - name: Detect NVIDIA GPU
      shell: lspci -nn | grep -i nvidia
      register: gpu_detection
      failed_when: gpu_detection.rc != 0

    - name: Determine GPU type
      set_fact:
        gpu_type: >-
          {%- if 'Tesla K80' in gpu_detection.stdout -%}
            tesla_k80
          {%- elif 'RTX' in gpu_detection.stdout or 'GTX' in gpu_detection.stdout -%}
            rtx_gtx
          {%- else -%}
            unknown
          {%- endif -%}

    #######################################################################
    # Keys: download on controller, copy to hosts, import locally
    #######################################################################

    - name: Prepare temp dir on controller for keys
      tempfile:
        state: directory
        suffix: ansible-keys
      register: key_tmpdir
      delegate_to: localhost
      run_once: true

    - name: Download RPMFusion Free GPG key (controller)
      get_url:
        url: https://download1.rpmfusion.org/free/fedora/RPM-GPG-KEY-rpmfusion-free-fedora-2020
        dest: "{{ key_tmpdir.path }}/RPM-GPG-KEY-rpmfusion-free-fedora-2020"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Download RPMFusion Nonfree GPG key (controller)
      get_url:
        url: https://download1.rpmfusion.org/nonfree/fedora/RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020
        dest: "{{ key_tmpdir.path }}/RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Download NVIDIA GPG key (controller)
      get_url:
        url: https://nvidia.github.io/libnvidia-container/gpgkey
        dest: "{{ key_tmpdir.path }}/RPM-GPG-KEY-nvidia"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Copy keys to hosts
      copy:
        src: "{{ item.src }}"
        dest: "/etc/pki/rpm-gpg/{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "{{ key_tmpdir.path }}/RPM-GPG-KEY-rpmfusion-free-fedora-2020",     dest: "RPM-GPG-KEY-rpmfusion-free-fedora-2020" }
        - { src: "{{ key_tmpdir.path }}/RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020",  dest: "RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020" }
        - { src: "{{ key_tmpdir.path }}/RPM-GPG-KEY-nvidia",                         dest: "RPM-GPG-KEY-nvidia" }

    - name: Import RPMFusion Free GPG key (from local file)
      rpm_key:
        state: present
        key: /etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-fedora-2020

    - name: Import RPMFusion Nonfree GPG key (from local file)
      rpm_key:
        state: present
        key: /etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020

    - name: Import NVIDIA GPG key (from local file)
      rpm_key:
        state: present
        key: /etc/pki/rpm-gpg/RPM-GPG-KEY-nvidia

    #######################################################################
    # Repos: download on controller, copy to hosts, install locally
    #######################################################################

    - name: Download RPMFusion Free release RPM (controller)
      get_url:
        url: "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        dest: "{{ key_tmpdir.path }}/rpmfusion-free-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Download RPMFusion Nonfree release RPM (controller)
      get_url:
        url: "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        dest: "{{ key_tmpdir.path }}/rpmfusion-nonfree-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Copy RPMFusion release RPMs to hosts
      copy:
        src: "{{ item }}"
        dest: "/tmp/{{ item | basename }}"
        mode: '0644'
      loop:
        - "{{ key_tmpdir.path }}/rpmfusion-free-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        - "{{ key_tmpdir.path }}/rpmfusion-nonfree-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"

    - name: Install RPMFusion release RPMs from local files
      dnf:
        name:
          - "/tmp/rpmfusion-free-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
          - "/tmp/rpmfusion-nonfree-release-{{ ansible_facts['distribution_version'] }}.noarch.rpm"
        state: present

    - name: Determine Fedora major version for CUDA repo
      set_fact:
        cuda_repo_version: "{{ ansible_facts['distribution_version'].split('.')[0] }}"
      when: gpu_type == 'rtx_gtx'

    - name: Fetch NVIDIA CUDA repo file (controller)
      get_url:
        url: "https://developer.download.nvidia.com/compute/cuda/repos/fedora{{ cuda_repo_version }}/x86_64/cuda-fedora{{ cuda_repo_version }}.repo"
        dest: "{{ key_tmpdir.path }}/cuda-fedora.repo"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      when: gpu_type == 'rtx_gtx'

    - name: Install NVIDIA CUDA repo file
      copy:
        src: "{{ key_tmpdir.path }}/cuda-fedora.repo"
        dest: "/etc/yum.repos.d/cuda-fedora.repo"
        mode: '0644'
      when: gpu_type == 'rtx_gtx'

    - name: Add NVIDIA container toolkit repo (via curl)
      shell: |
        curl -sL https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo \
          | tee /etc/yum.repos.d/nvidia-container-toolkit.repo
      args:
        executable: /bin/bash
      when: gpu_type == 'rtx_gtx'

    - name: Clean package metadata cache
      command: dnf clean all
      changed_when: false

    - name: Refresh package metadata cache
      command: dnf makecache --refresh -y
      changed_when: false

    #######################################################################
    # Driver install & smart reboot
    #######################################################################

    - name: Install Open DKMS NVIDIA Driver
      dnf:
        name: '@nvidia-driver:open-dkms/default'
        state: present
      when: gpu_type == 'rtx_gtx'
      register: install_open_dkms

    - name: Install NVIDIA Drivers for Tesla K80 (470xx Legacy)
      dnf:
        name:
          - xorg-x11-drv-nvidia-470xx
          - akmod-nvidia-470xx
        state: present
      when: gpu_type == 'tesla_k80'
      register: install_legacy_drivers

    - name: Rebuild NVIDIA Kernel Modules
      command: akmods --force
      when: gpu_type == 'tesla_k80'
      register: rebuild_akmods

    - name: Load NVIDIA Kernel Modules
      command: modprobe nvidia
      when: gpu_type == 'tesla_k80'
      register: modprobe_nvidia
      ignore_errors: true

    - name: Test if NVIDIA driver is already functional
      command: nvidia-smi
      register: nvidia_smi_test
      changed_when: false
      failed_when: false

    - name: Reboot if driver install happened and nvidia-smi still fails
      reboot:
        reboot_timeout: 600
        test_command: nvidia-smi
      when:
        - nvidia_smi_test.rc != 0
        - install_open_dkms.changed or install_legacy_drivers.changed

    - name: Verify NVIDIA installation after possible reboot
      command: nvidia-smi
      register: nvidia_smi_result
      changed_when: false
      failed_when: nvidia_smi_result.rc != 0

    #######################################################################
    # Post-install CUDA & toolkit
    #######################################################################

    - name: Install CUDA Toolkit & Persistence Daemon (nobest fallback)
      command: >
        dnf install cuda-toolkit-12-6 nvidia-persistenced --nobest -y
      register: cuda_install
      changed_when: "'Complete!' in cuda_install.stdout"
      failed_when: cuda_install.rc not in [0,1]
      when: gpu_type == 'rtx_gtx'

    - name: Install NVIDIA Container Toolkit
      dnf:
        name: nvidia-container-toolkit
        state: present
      when: gpu_type == 'rtx_gtx'

    - name: Enable and start NVIDIA persistence daemon
      systemd:
        name: nvidia-persistenced
        enabled: yes
        state: started
      when: gpu_type == 'rtx_gtx'

    - name: Configure CUDA environment variables
      copy:
        dest: "/etc/profile.d/cuda.sh"
        content: |
          export PATH=/usr/local/cuda/bin:$PATH
          export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      when: gpu_type == 'rtx_gtx'

    - name: Apply environment variables
      shell: source /etc/profile.d/cuda.sh
      args:
        executable: /bin/bash
      when: gpu_type == 'rtx_gtx'

    - name: Create ldconfig symlink
      file:
        src: "/sbin/ldconfig"
        dest: "/sbin/ldconfig.real"
        state: link

  when: gpu_type is defined

