# SPDX-License-Identifier: MIT-0
#
# Role Name: initialize_hypervisor
#
# This role checks that the libvirt service is listening on 0.0.0.0 and that the libvirt service is running.
# If the configuration is not correct, the role will correct it and restart the service, else it will do nothing.
#
# Requirements:
#   - The 'libvirt' package must be installed on the target machine (default hypervisor for Unraid).
#   - The 'python3' package must be installed on the target machine for Ansible to run (installable via NerdPack in Unraid GUI).
#
# Variables:
#   - This role has no variables, but reads the Unraid address from global Ansible variables.
#
---
# tasks file for initialize_hypervisor

- name: Ensure the libvirtd configuration file exists
  stat:
    path: /etc/libvirt/libvirtd.conf
  delegate_to: "{{ hypervisor_address }}"
  register: libvirtd_conf

- name: Fail if libvirtd configuration file does not exist
  fail:
    msg: "Error: /etc/libvirt/libvirtd.conf does not exist on the hypervisor."
  when: not libvirtd_conf.stat.exists

# Detect systemctl (Unraid typically doesn't have it)
- name: Detect systemctl on hypervisor
  ansible.builtin.command: test -x /bin/systemctl
  register: has_systemctl
  delegate_to: "{{ hypervisor_address }}"
  changed_when: false
  failed_when: false

# Enforce libvirtd TCP listen settings idempotently
- name: Ensure libvirtd TCP settings are present
  vars:
    libvirt_tcp_lines:
      - { key: 'listen_tls',  line: 'listen_tls = 0' }
      - { key: 'listen_tcp',  line: 'listen_tcp = 1' }
      - { key: 'tcp_port',    line: 'tcp_port = "16509"' }
      - { key: 'auth_tcp',    line: 'auth_tcp = "none"' }  # change to "sasl" if you want auth
      - { key: 'listen_addr', line: 'listen_addr = "0.0.0.0"' }
  block:
    - name: "{{ item.key }} in libvirtd.conf"
      ansible.builtin.lineinfile:
        path: /etc/libvirt/libvirtd.conf
        regexp: '^\s*{{ item.key }}\s*='
        line: "{{ item.line }}"
        state: present
        backrefs: false
      loop: "{{ libvirt_tcp_lines }}"
      loop_control:
        label: "{{ item.key }}"
      register: libvirt_conf_edits
      delegate_to: "{{ hypervisor_address }}"
      become: true

    - name: Determine if any edits were made
      ansible.builtin.set_fact:
        libvirt_conf_changed: "{{ libvirt_conf_edits.results | selectattr('changed','equalto',true) | list | length > 0 }}"

# Try to enable TCP socket on systemd hosts (harmless if already enabled)
- name: Enable libvirt TCP socket (systemd hosts only)
  ansible.builtin.command: systemctl enable --now libvirtd-tcp.socket
  delegate_to: "{{ hypervisor_address }}"
  when: has_systemctl.rc == 0
  changed_when: false
  failed_when: false

# Restart libvirt only if config changed
- name: Restart libvirt (systemd)
  ansible.builtin.command: systemctl restart libvirtd
  delegate_to: "{{ hypervisor_address }}"
  when:
    - has_systemctl.rc == 0
    - libvirt_conf_changed
  changed_when: true

- name: Restart libvirt (Unraid/rc script)
  ansible.builtin.command: /etc/rc.d/rc.libvirt restart
  delegate_to: "{{ hypervisor_address }}"
  when:
    - has_systemctl.rc != 0
    - libvirt_conf_changed
  changed_when: true

